import { FetchBaseQueryError } from '@reduxjs/toolkit/dist/query';
import { useEffect } from 'react';
import { SubmitHandler, useForm } from 'react-hook-form';
import { Link, useNavigate } from 'react-router-dom';
import Button from '../../components/Button/Button';
import FormField from '../../components/FormField/FormField';
import PageWrap from '../../components/PageWrap/PageWrap';
import Spinner from '../../components/svg/Spinner';
import { useCreatePostMutation } from '../../store/slices/postsApiSlice';
import { ButtonSC } from '../../styles/ButtonSC';
import { FormFieldErrorSC } from '../../styles/FormFieldErrorSC';
import { FormWrapSC } from '../../styles/FormWrapSC';
import { CreatePostInputs } from './types';

// TODO: Validate slug on FE and BE to allow only a-z, 0-9
// Also autogenerate on populated title via defaultValue, trim special chars, and replace ' ' with -

const CreatePost = () => {
  const [createPost, { isLoading, isSuccess, isError, error }] =
    useCreatePostMutation();

  const navigate = useNavigate();

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue,
  } = useForm<CreatePostInputs>();

  const titleValue = watch('title');

  // TODO: Make this better
  const autogeneratedSlug = titleValue
    ?.toLowerCase()
    .trim()
    .replaceAll(' ', '-');

  setValue('slug', autogeneratedSlug);

  useEffect(() => {
    if (isSuccess) {
      navigate('/my-posts');
    }
  }, [isSuccess, navigate]);

  const onSubmit: SubmitHandler<CreatePostInputs> = async (data) => {
    // TODO: Maybe save data in redux?
    try {
      await createPost({ ...data }).unwrap();
    } catch (e) {
      console.log(e);
    }
  };

  return (
    <PageWrap pageTitle="Create New Post">
      <div>
        <Link to="/my-posts" className="tdn">
          <ButtonSC>Back to my posts</ButtonSC>
        </Link>

        <FormWrapSC>
          <form onSubmit={handleSubmit(onSubmit)}>
            <FormField id="#create_post_slug" label="Slug" error={errors.slug}>
              <input
                type="text"
                id="create_post_slug"
                defaultValue=""
                {...register('slug', {
                  required: true,
                  minLength: 3,
                })}
              />
              {errors.slug && (
                <FormFieldErrorSC>Slug must not be empty</FormFieldErrorSC>
              )}
            </FormField>

            <h1>TITLE: {titleValue}</h1>
            <FormField
              id="#create_post_title"
              label="Title"
              error={errors.title}
            >
              <input
                type="text"
                id="create_post_title"
                defaultValue=""
                {...register('title', {
                  required: true,
                  minLength: 3,
                })}
              />
              {errors.title && (
                <FormFieldErrorSC>Title must not be empty</FormFieldErrorSC>
              )}
            </FormField>

            <FormField
              id="#create_post_content"
              label="Content"
              error={errors.content}
            >
              <textarea
                id="create_post_content"
                defaultValue=""
                {...register('content', {
                  required: true,
                  minLength: 3,
                })}
              />
              {errors.content && (
                <FormFieldErrorSC>Content must not be empty</FormFieldErrorSC>
              )}
            </FormField>

            <Button
              primary
              isWide
              size="large"
              type="submit"
              loading={isLoading}
            >
              Create Post
            </Button>

            {/* TODO: implement logic for updating the post slug as well, and if it already exists send a warning */}
          </form>
        </FormWrapSC>

        {isLoading && (
          <p>
            <Spinner /> Updating Post...
          </p>
        )}

        {!isLoading && isError && error && (
          <p style={{ color: 'crimson' }}>
            create post error:{' '}
            {JSON.stringify((error as FetchBaseQueryError)?.data, null, 2)}
          </p>
        )}
      </div>
    </PageWrap>
  );
};

export default CreatePost;

// if form is touched but not submitted, popup are you sure. Also, abort controller
